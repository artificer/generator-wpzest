var yeoman   = require('yeoman-generator'),
    util     = require('util'),
    Config   = require('../../util/config'),
    git      = require('simple-git')(),
    YPConfig = require('../../node_modules/generator-wordpress/util/config'),
    YPLogger = require('../../node_modules/generator-wordpress/util/log');

// Export the module
module.exports = Generator;

// Extend the base generator
function Generator(args, options, config) {
	yeoman.generators.Base.apply(this, arguments);

  this.option('skip-yp');

	// Log level option
	this.option('log', {
		desc: 'The log verbosity level: [ verbose | log | warn | error ]',
		defaults: 'log',
		alias: 'l',
		name: 'level'
	});

	// Setup the logger
	this.logger = YPLogger({
		level: this.options.log
	});

	// Load the WPZest config
	this.conf   = new Config();
	if(this.options.skipYp) {
		//TODO warn if .yeopress doesn't exist
	  this.YPConf = new YPConfig();
	}
}
util.inherits(Generator, yeoman.Base);

Generator.prototype.initializing = {
	WP: function() {

		var me = this;

		if(this.options.skipYp) {
			//TODO: Check if YeoPress has already been initalised and 
			//throw error if not
			this._WPDeploy();
			return;
		}

		/*this.composeWith('wordpress', {}, {
		  local: require.resolve('generator-wordpress')
		});*/

		var generator;
		var WPGen = require('generator-wordpress');
		WPGen.resolved = require.resolve('generator-wordpress');
		WPGen.namespace = 'wordpress';
		generator = this.env.instantiate(WPGen, {});
	  generator.run(function() {
	  	me.YPConf = new YPConfig();
	  	me._WPDeploy();
	  });
	}
};

Generator.prototype._WPDeploy = function() {
	
	// This is an async step
	var done = this.async(),
		  me   = this;

	function getInput(defaults) {

		defaults = defaults || me.conf.get();

		me.prompt(require('./prompts')(defaults), function(input) {
			me.prompt([{
				message: 'Does all this look correct?',
				name: 'confirm',
				type: 'confirm'
			}], function(i) {
				if (i.confirm) {
					me.deployInput = input;
					console.log(me.deployInput);
					me.conf.set(input);
					me._installDeploy();
					done();
				} else {
					getInput(input);
				}
			});
		});
	}

	getInput();	
	// this._installDeploy();
};

Generator.prototype._installDeploy = function() {

	var me   = this,
		  done = this.async();

	if(!this.conf.get('hasStaging') && !this.conf.get('hasProduction')) {
		this._moreFire();
		return;
	}

	this.logger.log('Installing WP-CLI-Deploy');

	this.remote('c10b10', 'wp-cli-deploy', function(err, remote) {
		remote.directory('.', me.YPConf.get('wpDir') + '/wp-cli-deploy');
		me.logger.log('WP-CLI-Deploy installed!');
		done();
	});

	this._configureDeploy();	
};

Generator.prototype._configureDeploy = function() {

	this.template('wp-cli.local.yml.tmpl', 'wp-cli.local.yml');
	this.template('wp-config-deploy.php.tmpl', 'wp-config-deploy.php');

	if(this.conf.get('hasStaging')) {
		this.template('wp-config-staging.tmp.tmpl', 'wp-config-staging.tmp');		
	}

	if(this.conf.get('hasProduction')) {
		this.template('wp-config-production.tmp.tmpl', 'wp-config-production.tmp');
	}

	this._moreFire();
};


Generator.prototype._moreFire = function() {

	console.log("turn up the heat");
	
	var done = this.async();

	/*
	 * HACK Warning. we commit the filesystem before and after deleting
	 * the wp-config.php generated by YeoPress in order to avoid YeoMan asking
	 * if we are sure we'd like to overwrite the file
	 */
	this.fs.delete(this.destinationPath('wp-config.php'));
	this.fs.delete(this.destinationPath('local-config.php'));
	this.fs.delete(this.destinationPath('.gitignore'));
	this.fs.commit(done);

	this.template('wp-config.php.tmpl', 'wp-config.php');
	this.template('wp-config-local.php.tmpl', 'wp-config-local.php');
	this.template('gitignore.tmpl', '.gitignore');

	this._gitMeUp();
};

Generator.prototype._gitMeUp = function() {

	var me       = this,
		  done     = this.async(),
		  message = "Augment YeoPress scaffold";

	if(!this.YPConf.get('git')) {
		return;
	} 

	if(this.conf.get('hasStaging') || this.conf.get('hasProduction')) {
		message += " and setup WP-CLI-Deploy";
	}

	git.add('.', function(err) {
			if (err) me.logger.error(err);
		}).add('wp-cli-deploy', function(err) {
			if (err) me.logger.error(err);
		}).commit(message, function(err, d) {
			if (err) me.logger.error(err);
			
			me.logger.verbose('Git add and commit complete: ' + JSON.stringify(d, null, '  '));
			done();
		});

};
